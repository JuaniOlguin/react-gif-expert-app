{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","then","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAc5C,OACI,mCACI,sBAAMC,SARO,SAACC,GAClBA,EAAEC,iBACuB,KAAtBJ,EAAWK,QACdP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,QAKlC,SACI,uBACIC,KAAK,OACLC,YAAY,cACZC,MAAQT,EACRU,SAjBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYbM,GAZa,4CAAH,sDCYLO,EAVY,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,OAfAC,qBAAW,WAEPC,YAAW,WACPzB,EAAQC,GACPyB,MAAK,SAAAf,GACFY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGlB,QAGJ,CAACpB,IAEGqB,EDnBmBK,CAAa1B,GAA/BO,EAF2B,EAE3BA,KAAMa,EAFqB,EAErBA,QAQd,OACI,qCACI,6BAAKpB,IAEHoB,GAAW,mBAAGJ,UAAU,sCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGQT,EAAKE,KAAM,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADAA,EAAIC,aEQtBgB,EA7BM,WAAO,IAAD,EAGazC,mBAAS,IAHtB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAFhC,IAGI,uBACA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCf3B6B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.9667ac03.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim() !== '')//validar que no este vacio\r\n        setCategories(cats => [inputValue, ...cats]); //paso como argumento el callback con el estado anterior y el nuevo inputValue\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Buscar GIFs\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                />\r\n            </form>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n} \r\n","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=x6vCmNmPZ6nfQdJ4xGCn8olc5M22VmZN`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json() //recibo en formato json, solo el array data\r\n    \r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //? solo renderiza las imagenes \r\n        }\r\n    })\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem","import React from 'react' //useEffect permite ejecutar codigo de manera condicional\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const { data, loading } = useFetchGifs(category);\r\n\r\n    // useEffect( () => {\r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs));\r\n    // }, [category])//arreglo de dependencias, se ejecuta cuando el componente es renderizado por primera vez\r\n    \r\n    //hice que getGifs sea un helper para que este componente tenga buena cohesion\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__bounceIn\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    data.map(  img  => (\r\n                        <GifGridItem  \r\n                            key={img.id}\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        \r\n        setTimeout(() => {\r\n            getGifs(category)\r\n            .then(img => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                });\r\n            });\r\n        }, 1500);\r\n        \r\n\r\n    }, [category])//arreglo de dependencias, se ejecuta cuando el componente es renderizado por primera vez\r\n\r\n    return state;\r\n}","import React, {useState} from 'react'; //rafc -> crea componente\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'Dragon Ball']); //pisa el estado anterior\r\n    //     //setCategories( cats => [...cats, 'Dragon Ball']) //puede recibir un callback con el estado anterior como parametro\r\n    // } La agregacion se hace desde otro componente por lo que aca no hace falta\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} /> {/*envio la referencia a setCategories como prop a AddCategory*/}\r\n            <hr />\r\n            <ul>\r\n                {\r\n                    categories.map((category) => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )) \r\n                    //el key es el mismo elemento del arreglo porque react arregla todo en el background, es obligatorio para react\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render(<GifExpertApp />, divRoot);\n\n"],"sourceRoot":""}